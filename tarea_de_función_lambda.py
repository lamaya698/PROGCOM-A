# -*- coding: utf-8 -*-
"""tarea de función lambda

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1FY9dE8_valA-XKiNklKJnESovc00Ch32
"""

import random

# Definir los 10 colores
colores = [input(f"Ingrese el color {i+1}: ").strip().lower() for i in range(10)]

# Seleccionar un color aleatorio
color_secreto = random.choice(colores)

# Función anónima para verificar la adivinanza
adivinar = lambda intento: intento.lower() == color_secreto

# Intentos del usuario
for intento in range(10):
    respuesta = input(f"Intento {intento+1}/10 - Adivina el color: ").strip().lower()

    if adivinar(respuesta):
        print("¡Correcto! Adivinaste el color.")
        break
    else:
        print("Incorrecto. Intenta de nuevo.")
else:
    print(f"Lo siento, no adivinaste. El color era: {color_secreto}")

# Función lambda para filtrar números pares
numeros_pares = list(filter(lambda x: x % 2 == 0, range(1, 101)))

# Mostrar los números pares
print(numeros_pares)

import json

def suma_digitos(numero):
    return sum(int(digito) for digito in str(abs(numero)))

def lambda_handler(event, context):
    try:
        numero = int(event.get("numero", 0))
        resultado = suma_digitos(numero)
        return {
            'statusCode': 200,
            'body': json.dumps({'suma': resultado})
        }
    except ValueError:
        return {
            'statusCode': 400,
            'body': json.dumps({'error': 'Entrada inválida'})
        }

# Función para determinar si un número es primo
def es_primo(numero):
    if numero <= 1:
        return False  # Los números menores o iguales a 1 no son primos
    for i in range(2, int(numero ** 0.5) + 1):  # Recorremos desde 2 hasta la raíz cuadrada de 'numero'
        if numero % i == 0:  # Si 'numero' es divisible por 'i'
            return False  # No es primo
    return True  # Si no se encontró ningún divisor, es primo

# Solicitamos al usuario un número
numero = int(input("Introduce un número para verificar si es primo: "))

# Verificamos si el número es primo
if es_primo(numero):
    print(f"El número {numero} es primo.")
else:
    print(f"El número {numero} no es primo.")

# Función para mostrar un triángulo de asteriscos
def mostrar_triangulo(filas):
    for i in range(1, filas + 1):  # Iteramos de 1 hasta el número de filas
        # Imprimimos los asteriscos para la fila 'i'
        print('*' * i)

# Solicitamos al usuario la cantidad de filas
filas = int(input("Introduce el número de filas para el triángulo: "))

# Mostramos el triángulo
mostrar_triangulo(filas)

# Función para calcular la potencia usando una función lambda
calcular_potencia = lambda base, exponente: 1 / (base ** -exponente) if exponente < 0 else base ** exponente

# Solicitamos al usuario la base y el exponente
base = float(input("Introduce la base: "))
exponente = int(input("Introduce el exponente: "))

# Calculamos la potencia
potencia = calcular_potencia(base, exponente)

# Mostramos el resultado
print(f"{base} elevado a la {exponente} es: {potencia}")